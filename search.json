[{"path":"/articles/motusTrack.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"motusTrack","text":"First make sure cmdstanr CmdStan available system. can find information . Check whether suitable C++ toolchain installed system: , go https://mc-stan.org/docs/cmdstan-guide/cmdstan-installation.html#cpp-toolchain follow instructions platform. toolchain configured correctly CmdStan can installed: Now can install motusTrack using:","code":"install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) library(cmdstanr) check_cmdstan_toolchain() install_cmdstan(cores = 2) library(devtools) install_github(\"g-rppl/motusTrack\", ref = \"main\", dependencies = TRUE, auth_token = \"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\")"},{"path":"/articles/motusTrack.html","id":"example-workflow","dir":"Articles","previous_headings":"","what":"Example workflow","title":"motusTrack","text":"","code":"library(motusTrack) library(tidyverse) library(leaflet)  # load data data(testdata)  # estimate locations based on antenna bearings and signal strength loc <- locate(testdata, dtime = 1)  # model flight path fit <- track(loc, refresh = 1e3)  # extract estimates est <- estimates(fit, loc)  # for now transform data manually map <- est %>%     select(-c(\"lwr\", \"upr\")) %>%     pivot_wider(values_from = mean)  # calculate speed map$speed <- speed(map)  # plot flight path leaflet(map) %>%     addTiles() %>%     addCircles(lng = ~lon, lat = ~lat) %>%     addPolylines(lng = ~lon, lat = ~lat) %>%     addCircles(         lng = ~recvDeployLon,         lat = ~recvDeployLat,         data = loc,         color = \"black\",         opacity = 1)  # plot flight speed ggplot(map) +     geom_path(aes(x = lon, y = lat, color = speed)) +     scale_color_viridis_c()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Georg Rüppel. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rüppel G (2023). motusTrack: Estimate flight tracks Motus data. R package version 0.1.0.9000.","code":"@Manual{,   title = {motusTrack: Estimate flight tracks from Motus data},   author = {Georg Rüppel},   year = {2023},   note = {R package version 0.1.0.9000}, }"},{"path":"/index.html","id":"motustrack","dir":"","previous_headings":"","what":"Estimate flight tracks from Motus data","title":"Estimate flight tracks from Motus data","text":"motusTrack R package provides simple functionality estimate flight tracks Motus data using random walk models written Stan.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate flight tracks from Motus data","text":"First make sure cmdstanr CmdStan available system. can find information . Check whether suitable C++ toolchain installed system: , go https://mc-stan.org/docs/cmdstan-guide/cmdstan-installation.html#cpp-toolchain follow instructions platform. toolchain configured correctly CmdStan can installed: Now can install motusTrack using:","code":"install.packages(\"cmdstanr\", repos = c(\"https://mc-stan.org/r-packages/\", getOption(\"repos\"))) library(cmdstanr) check_cmdstan_toolchain() install_cmdstan(cores = 2) library(devtools) install_github(\"g-rppl/motusTrack\", ref = \"main\", dependencies = TRUE, auth_token = \"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\")"},{"path":"/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example workflow","title":"Estimate flight tracks from Motus data","text":"","code":"library(motusTrack) library(tidyverse) library(leaflet)  # load data data(testdata)  # estimate locations based on antenna bearings and signal strength loc <- locate(testdata, dtime = 1)  # model flight path fit <- track(loc, refresh = 1e3)  # extract estimates est <- estimates(fit, loc)  # for now transform data manually map <- est %>%     select(-c(\"lwr\", \"upr\")) %>%     pivot_wider(values_from = mean)  # calculate speed map$speed <- speed(map)  # plot flight path leaflet(map) %>%     addTiles() %>%     addCircles(lng = ~lon, lat = ~lat) %>%     addPolylines(lng = ~lon, lat = ~lat) %>%     addCircles(         lng = ~recvDeployLon,         lat = ~recvDeployLat,         data = loc,         color = \"black\",         opacity = 1)  # plot flight speed ggplot(map) +     geom_path(aes(x = lon, y = lat, color = speed)) +     scale_color_viridis_c()"},{"path":"/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances — distance","title":"Calculate distances — distance","text":"Calculate distances consecutive locations.","code":""},{"path":"/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances — distance","text":"","code":"distance(x)"},{"path":"/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances — distance","text":"x data.frame wide format.","code":""},{"path":"/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances — distance","text":"Returns vector distances consecutive locations metres.","code":""},{"path":"/reference/estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract estimates — estimates","title":"Extract estimates — estimates","text":"Extract estimates model output.","code":""},{"path":"/reference/estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract estimates — estimates","text":"","code":"estimates(fit, mdata = NULL, prob = 0.9)"},{"path":"/reference/estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract estimates — estimates","text":"fit CmdStanMCMC object containing model output. mdata data.frame containing metadata time interval. prob scalar [0, 1] specifying mass within credible interval.","code":""},{"path":"/reference/estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract estimates — estimates","text":"Returns data.frame containing mean lower upper bound highest density interval time interval.","code":""},{"path":"/reference/locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate location — locate","title":"Estimate location — locate","text":"Calculate point estimates based antenna bearing signal strength.","code":""},{"path":"/reference/locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate location — locate","text":"","code":"locate(   data = NULL,   ts = \"ts\",   sig = \"sig\",   aLon = \"recvDeployLon\",   aLat = \"recvDeployLat\",   aBearing = \"antBearing\",   det_range = 12,   dtime = 2 )"},{"path":"/reference/locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate location — locate","text":"data data.frame containing telemetry data. ts Timestamp column. sig Signal strength column. aLon Antenna longitude column. aLat Antenna latitude column. aBearing Antenna bearing column. det_range Assumed maximum detection range antennas kilometres. dtime Time interval minutes point estimates calculated.","code":""},{"path":"/reference/locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate location — locate","text":"Returns data.frame containing estimated coordinates measurement errors time interval together proportions time intervals w.","code":""},{"path":"/reference/locate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate location — locate","text":"Estimate location detection: half detection range along directional beam. Derive oscillating measurement error. Weighted means (signal strength) time interval.","code":""},{"path":"/reference/speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate speed — speed","title":"Calculate speed — speed","text":"Calculate flight speed consecutive locations.","code":""},{"path":"/reference/speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate speed — speed","text":"","code":"speed(x)"},{"path":"/reference/speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate speed — speed","text":"x data.frame wide format.","code":""},{"path":"/reference/speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate speed — speed","text":"Returns vector speeds consecutive locations m/s.","code":""},{"path":"/reference/testdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Motus test data — testdata","title":"Motus test data — testdata","text":"Motus test data","code":""},{"path":"/reference/testdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Motus test data — testdata","text":"https://motus.org/","code":""},{"path":"/reference/track.html","id":null,"dir":"Reference","previous_headings":"","what":"Model data — track","title":"Model data — track","text":"Model flight path point estimates using DCRW model.","code":""},{"path":"/reference/track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model data — track","text":"","code":"track(data = NULL, refresh = 100)"},{"path":"/reference/track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model data — track","text":"data data.frame containing point estimate data. refresh number iterations printed screen updates. refresh = 0, error messages printed.","code":""},{"path":"/reference/track.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model data — track","text":"CmdStanMCMC object.","code":""}]
